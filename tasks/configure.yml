---

# Nginx and PHP configuration

- name: Configure Nginx for Icinga Web 2
  template:
    src: nginx-icingaweb2.conf.j2
    dest: "{{ icingaweb2_http_conf_file_path }}"
  when: icingaweb2_http_server|lower == 'nginx'
  tags: ['install-icinga2-stack', 'install-icingaweb2']
  debugger: on_skipped
  notify: Restart Nginx

- name: Set PHP Date Timezone
  lineinfile:
    dest: "{{ icingaweb2_php_ini_file_path }}"
    regexp: "date.timezone ="
    line: "date.timezone = {{ icingaweb2_timezone }}"
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']
  notify: "Restart PHP-FPM"


# Icingaweb2 configuration

- name: Configure authentication configuration file
  template:
    src: authentication.ini.j2
    dest: /etc/icingaweb2/authentication.ini
    owner: www-data
    group: icingaweb2
    mode: 0660
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Configure main configuration file
  template:
    src: config.ini.j2
    dest: /etc/icingaweb2/config.ini
    owner: www-data
    group: icingaweb2
    mode: 0660
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Configure groups configuration file
  template:
    src: groups.ini.j2
    dest: /etc/icingaweb2/groups.ini
    owner: www-data
    group: icingaweb2
    mode: 0660
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Configure resources configuration file
  template:
    src: resources.ini.j2
    dest: /etc/icingaweb2/resources.ini
    owner: www-data
    group: icingaweb2
    mode: 0660
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Configure roles configuration file
  template:
    src: roles.ini.j2
    dest: /etc/icingaweb2/roles.ini
    owner: www-data
    group: icingaweb2
    mode: 0660
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']


# Configure admin user

- name: Generate the password hash for the Icingaweb2 admin user
  command: "php -r \"echo password_hash('{{ icingaweb2_admin_password }}', PASSWORD_DEFAULT);\""
  register: icingaweb2_admin_password_hash
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Check if admin user already exists
  command: "mysql -Nse \"SELECT count(*) FROM icingaweb_user where name = '{{ icingaweb2_admin_username }}'\" {{ icingaweb2_db_name }}"
  register: icingaweb2_admin_user
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Insert the Icingaweb2 admin user
  command: "{{ _mysql_cmd }} -Nse \"INSERT INTO icingaweb_user (name, active, password_hash) VALUES ('{{ icingaweb2_admin_username }}', 1, '{{ icingaweb2_admin_password_hash.stdout }}');\" {{ icingaweb2_db_name }}"
  register: icingaweb2_admin_user_create_query
  when: icingaweb2_install == true and icingaweb2_admin_password_hash.stdout != "" and icingaweb2_admin_user.stdout == "0"
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Check if the password of the Icingaweb2 admin user needs to be changed
  command: "mysql -Nse \"SELECT count(*) FROM icingaweb_user where name = '{{ icingaweb2_admin_username }}' and password_hash = '{{ icingaweb2_admin_password_hash.stdout }}'\" {{ icingaweb2_db_name }}"
  register: icingaweb2_admin_user_check_password
  when: icingaweb2_install == true and icingaweb2_admin_password_hash.stdout != "" and icingaweb2_admin_user.stdout != "0"
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Change the password of the Icingaweb2 admin user
  command: "mysql -Nse \"UPDATE icingaweb_user SET password_hash = '{{ icingaweb2_admin_password_hash.stdout }}' where name = '{{ icingaweb2_admin_username }}'\" {{ icingaweb2_db_name }}"  
  when: icingaweb2_install == true and icingaweb2_admin_password_hash.stdout != "" and icingaweb2_admin_user.stdout != "0" and icingaweb2_admin_user_check_password.stdout == "0"
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Check if admin group already exists
  command: "mysql -Nse \"SELECT count(*) FROM icingaweb_group where name = 'Administrators'\" {{ icingaweb2_db_name }}"
  register: icingaweb2_admin_group
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Insert the Icingaweb2 admin group
  command: "{{ _mysql_cmd }} -Nse \"INSERT INTO icingaweb_group (name) VALUES ('Administrators');\" {{ icingaweb2_db_name }}"
  when: icingaweb2_install == true and icingaweb2_admin_group.stdout == "0"
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Get the admin group ID
  command: "mysql -Nse \"SELECT id FROM icingaweb_group where name = 'Administrators'\" {{ icingaweb2_db_name }}"
  register: icingaweb2_admin_group_id
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Check if the admin username is already assigned to the admin group
  command: "mysql -Nse \"SELECT count(*) FROM icingaweb_group_membership where group_id = '{{ icingaweb2_admin_group_id.stdout }}' AND username = '{{ icingaweb2_admin_username }}'\" {{ icingaweb2_db_name }}"
  register: icingaweb2_admin_group_membership
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Assign the Icingaweb2 admin user to the admin group
  command: "{{ _mysql_cmd }} -Nse \"INSERT INTO icingaweb_group_membership (group_id, username) VALUES ('{{ icingaweb2_admin_group_id.stdout }}', '{{ icingaweb2_admin_username }}');\" {{ icingaweb2_db_name }}"
  when: icingaweb2_install == true and icingaweb2_admin_group_membership.stdout == "0"
  tags: ['install-icinga2-stack', 'install-icingaweb2']


# Configure monitoring module

- name: Create the monitoring module configuration directory
  file:
    path: /etc/icingaweb2/modules/monitoring
    state: directory
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Configure backends configuration file
  template:
    src: monitoring/backends.ini.j2
    dest: /etc/icingaweb2/modules/monitoring/backends.ini
    owner: www-data
    group: icingaweb2
    mode: 0660
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Configure command transports configuration file
  template:
    src: monitoring/commandtransports.ini.j2
    dest: /etc/icingaweb2/modules/monitoring/commandtransports.ini
    owner: www-data
    group: icingaweb2
    mode: 0660
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Configure security configuration file
  template:
    src: monitoring/security.ini.j2
    dest: /etc/icingaweb2/modules/monitoring/security.ini
    owner: www-data
    group: icingaweb2
    mode: 0660
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Create the enabledModules directory
  file:
    path: /etc/icingaweb2/enabledModules
    state: directory
    owner: www-data
    group: icingaweb2
    mode: "2750"
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

- name: Enable the monitoring module
  file:
    path: /etc/icingaweb2/enabledModules/monitoring
    src: "{{ icingaweb2_monitoring_module_path }}"
    state: link
    owner: www-data
    group: icingaweb2
    mode: 0777
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']

# Final

- name: Ensure that no setup token are configured
  file:
    path: /etc/icingaweb2/setup.token
    state: absent
  when: icingaweb2_install == true
  tags: ['install-icinga2-stack', 'install-icingaweb2']
